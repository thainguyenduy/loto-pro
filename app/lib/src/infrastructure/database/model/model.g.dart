// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Contact.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Contact TABLE
class TableContact extends SqfEntityTableBase {
  TableContact() {
    // declare properties of EntityTable
    tableName = 'contact';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.text;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('telegramId', DbType.text, isNotNull: true),
      SqfEntityFieldBase('name', DbType.text, isNotNull: true),
      SqfEntityFieldBase('phone', DbType.text, isNotNull: true),
      SqfEntityFieldBase('chatId', DbType.text, isNotNull: true),
      SqfEntityFieldBase('autoParse', DbType.bool,
          defaultValue: false, isNotNull: true),
      SqfEntityFieldBase('accountAlias', DbType.text),
      SqfEntityFieldBase('contactAlias', DbType.text),
      SqfEntityFieldBase('replyMode', DbType.integer,
          defaultValue: 0, isNotNull: true),
      SqfEntityFieldBase('debtReminderMode', DbType.integer,
          defaultValue: 0, isNotNull: true),
      SqfEntityFieldRelationshipBase(
          TableAccount.getInstance, DeleteRule.NO_ACTION,
          relationType: RelationType.ONE_TO_MANY, fieldName: 'accountId'),
      SqfEntityFieldBase('dateCreated', DbType.datetime,
          defaultValue: DateTime.now(), minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableContact();
  }
}

// Account TABLE
class TableAccount extends SqfEntityTableBase {
  TableAccount() {
    // declare properties of EntityTable
    tableName = 'account';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.text;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('telegramId', DbType.text),
      SqfEntityFieldBase('deviceId', DbType.text, isNotNull: true),
      SqfEntityFieldBase('phone', DbType.text, isNotNull: true),
      SqfEntityFieldBase('dateCreated', DbType.datetime,
          defaultValue: DateTime.now(), minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableAccount();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence? _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class LDModel extends SqfEntityModelProvider {
  LDModel() {
    databaseName = lddbModel.databaseName;
    password = lddbModel.password;
    dbVersion = lddbModel.dbVersion;
    preSaveAction = lddbModel.preSaveAction;
    logFunction = lddbModel.logFunction;
    databaseTables = [
      TableContact.getInstance,
      TableAccount.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = lddbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = lddbModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Contact
class Contact extends TableBase {
  Contact(
      {this.id,
      this.telegramId,
      this.name,
      this.phone,
      this.chatId,
      this.autoParse,
      this.accountAlias,
      this.contactAlias,
      this.replyMode,
      this.debtReminderMode,
      this.accountId,
      this.dateCreated}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Contact.withFields(
      this.id,
      this.telegramId,
      this.name,
      this.phone,
      this.chatId,
      this.autoParse,
      this.accountAlias,
      this.contactAlias,
      this.replyMode,
      this.debtReminderMode,
      this.accountId,
      this.dateCreated) {
    _setDefaultValues();
  }
  Contact.withId(
      this.id,
      this.telegramId,
      this.name,
      this.phone,
      this.chatId,
      this.autoParse,
      this.accountAlias,
      this.contactAlias,
      this.replyMode,
      this.debtReminderMode,
      this.accountId,
      this.dateCreated) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Contact.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = o['id'].toString();
    if (o['telegramId'] != null) {
      telegramId = o['telegramId'].toString();
    }
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['phone'] != null) {
      phone = o['phone'].toString();
    }
    if (o['chatId'] != null) {
      chatId = o['chatId'].toString();
    }
    if (o['autoParse'] != null) {
      autoParse = o['autoParse'].toString() == '1' ||
          o['autoParse'].toString() == 'true';
    }
    if (o['accountAlias'] != null) {
      accountAlias = o['accountAlias'].toString();
    }
    if (o['contactAlias'] != null) {
      contactAlias = o['contactAlias'].toString();
    }
    if (o['replyMode'] != null) {
      replyMode = int.tryParse(o['replyMode'].toString());
    }
    if (o['debtReminderMode'] != null) {
      debtReminderMode = int.tryParse(o['debtReminderMode'].toString());
    }
    accountId = o['accountId'].toString();

    if (o['dateCreated'] != null) {
      dateCreated = int.tryParse(o['dateCreated'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateCreated'].toString())!)
          : DateTime.tryParse(o['dateCreated'].toString());
    }

    // RELATIONSHIPS FromMAP
    plAccount = o['account'] != null
        ? Account.fromMap(o['account'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP

    isSaved = true;
  }
  // FIELDS (Contact)
  String? id;
  String? telegramId;
  String? name;
  String? phone;
  String? chatId;
  bool? autoParse;
  String? accountAlias;
  String? contactAlias;
  int? replyMode;
  int? debtReminderMode;
  String? accountId;
  DateTime? dateCreated;
  bool? isSaved;
  // end FIELDS (Contact)

// RELATIONSHIPS (Contact)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plAccount', 'plField2'..]) or so on..
  Account? plAccount;

  /// get Account By AccountId
  Future<Account?> getAccount(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Account().getById(accountId,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Contact)

  static const bool _softDeleteActivated = false;
  ContactManager? __mnContact;

  ContactManager get _mnContact {
    return __mnContact = __mnContact ?? ContactManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (telegramId != null || !forView) {
      map['telegramId'] = telegramId;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (phone != null || !forView) {
      map['phone'] = phone;
    }
    if (chatId != null || !forView) {
      map['chatId'] = chatId;
    }
    if (autoParse != null) {
      map['autoParse'] = forQuery ? (autoParse! ? 1 : 0) : autoParse;
    } else if (autoParse != null || !forView) {
      map['autoParse'] = null;
    }
    if (accountAlias != null || !forView) {
      map['accountAlias'] = accountAlias;
    }
    if (contactAlias != null || !forView) {
      map['contactAlias'] = contactAlias;
    }
    if (replyMode != null || !forView) {
      map['replyMode'] = replyMode;
    }
    if (debtReminderMode != null || !forView) {
      map['debtReminderMode'] = debtReminderMode;
    }
    if (accountId != null) {
      map['accountId'] = forView
          ? plAccount == null
              ? accountId
              : plAccount!.telegramId
          : accountId;
    } else if (accountId != null || !forView) {
      map['accountId'] = null;
    }
    if (dateCreated != null) {
      map['dateCreated'] = forJson
          ? dateCreated!.toString()
          : forQuery
              ? dateCreated!.millisecondsSinceEpoch
              : dateCreated;
    } else if (dateCreated != null || !forView) {
      map['dateCreated'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (telegramId != null || !forView) {
      map['telegramId'] = telegramId;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (phone != null || !forView) {
      map['phone'] = phone;
    }
    if (chatId != null || !forView) {
      map['chatId'] = chatId;
    }
    if (autoParse != null) {
      map['autoParse'] = forQuery ? (autoParse! ? 1 : 0) : autoParse;
    } else if (autoParse != null || !forView) {
      map['autoParse'] = null;
    }
    if (accountAlias != null || !forView) {
      map['accountAlias'] = accountAlias;
    }
    if (contactAlias != null || !forView) {
      map['contactAlias'] = contactAlias;
    }
    if (replyMode != null || !forView) {
      map['replyMode'] = replyMode;
    }
    if (debtReminderMode != null || !forView) {
      map['debtReminderMode'] = debtReminderMode;
    }
    if (accountId != null) {
      map['accountId'] = forView
          ? plAccount == null
              ? accountId
              : plAccount!.telegramId
          : accountId;
    } else if (accountId != null || !forView) {
      map['accountId'] = null;
    }
    if (dateCreated != null) {
      map['dateCreated'] = forJson
          ? dateCreated!.toString()
          : forQuery
              ? dateCreated!.millisecondsSinceEpoch
              : dateCreated;
    } else if (dateCreated != null || !forView) {
      map['dateCreated'] = null;
    }

    return map;
  }

  /// This method returns Json String [Contact]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Contact]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      id,
      telegramId,
      name,
      phone,
      chatId,
      autoParse,
      accountAlias,
      contactAlias,
      replyMode,
      debtReminderMode,
      accountId,
      dateCreated != null ? dateCreated!.millisecondsSinceEpoch : null
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      telegramId,
      name,
      phone,
      chatId,
      autoParse,
      accountAlias,
      contactAlias,
      replyMode,
      debtReminderMode,
      accountId,
      dateCreated != null ? dateCreated!.millisecondsSinceEpoch : null
    ];
  }

  static Future<List<Contact>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Contact.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Contact>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Contact>[];
    try {
      objList = list
          .map((contact) => Contact.fromMap(contact as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Contact.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Contact>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Contact> objList = <Contact>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Contact.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plAccount'))) {
          obj.plAccount =
              obj.plAccount ?? await obj.getAccount(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Contact by ID if exist, otherwise returns null
  /// Primary Keys: String? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Contact] if exist, otherwise returns null
  Future<Contact?> getById(String? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Contact? obj;
    final data = await _mnContact.getById([id]);
    if (data.length != 0) {
      obj = Contact.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plAccount'))) {
          obj.plAccount =
              obj.plAccount ?? await obj.getAccount(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Contact) object. If the Primary Key (id) field is null, returns Error.
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  /// Call the saveAs() method if you do not want to save it when there is another row with the same id
  /// <returns>Returns BoolResult
  @override
  Future<BoolResult> save({bool ignoreBatch = true}) async {
    final result = BoolResult(success: false);
    try {
      await _mnContact.rawInsert(
          'INSERT ${isSaved! ? 'OR REPLACE' : ''} INTO contact (id, telegramId, name, phone, chatId, autoParse, accountAlias, contactAlias, replyMode, debtReminderMode, accountId, dateCreated)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?)',
          toArgsWithIds(),
          ignoreBatch);
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

    saveResult = result;
    return result;
  }

  /// saveAll method saves the sent List<Contact> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Contact> contacts,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await LDModel().batchStart();
    for (final obj in contacts) {
      await obj.save();
    }
    if (!isStartedBatch) {
      result = await LDModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns 1
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnContact.rawInsert(
          'INSERT OR REPLACE INTO contact (id, telegramId, name, phone, chatId, autoParse, accountAlias, contactAlias, replyMode, debtReminderMode, accountId, dateCreated)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            telegramId,
            name,
            phone,
            chatId,
            autoParse,
            accountAlias,
            contactAlias,
            replyMode,
            debtReminderMode,
            accountId,
            dateCreated != null ? dateCreated!.millisecondsSinceEpoch : null
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Contact id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Contact id=$id did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Contact Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Deletes Contact

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Contact invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnContact
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnContact.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Contact] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  ContactFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ContactFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  ContactFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ContactFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
    autoParse = autoParse ?? false;
    replyMode = replyMode ?? 0;
    debtReminderMode = debtReminderMode ?? 0;
    dateCreated = dateCreated ?? DateTime.now();
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion contact

// region ContactField
class ContactField extends FilterBase {
  ContactField(ContactFilterBuilder contactFB) : super(contactFB);

  @override
  ContactFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as ContactFilterBuilder;
  }

  @override
  ContactFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as ContactFilterBuilder;
  }

  @override
  ContactFilterBuilder isNull() {
    return super.isNull() as ContactFilterBuilder;
  }

  @override
  ContactFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as ContactFilterBuilder;
  }

  @override
  ContactFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as ContactFilterBuilder;
  }

  @override
  ContactFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as ContactFilterBuilder;
  }

  @override
  ContactFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as ContactFilterBuilder;
  }

  @override
  ContactFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as ContactFilterBuilder;
  }

  @override
  ContactFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as ContactFilterBuilder;
  }

  @override
  ContactFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as ContactFilterBuilder;
  }

  @override
  ContactFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as ContactFilterBuilder;
  }

  @override
  ContactFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as ContactFilterBuilder;
  }

  @override
  ContactField get not {
    return super.not as ContactField;
  }
}
// endregion ContactField

// region ContactFilterBuilder
class ContactFilterBuilder extends ConjunctionBase {
  ContactFilterBuilder(Contact obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnContact = obj._mnContact;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  ContactManager? _mnContact;

  /// put the sql keyword 'AND'
  @override
  ContactFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  ContactFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  ContactFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  ContactFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  ContactFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  ContactFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  ContactFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ContactFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ContactFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ContactFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ContactFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  ContactField _setField(ContactField? field, String colName, DbType dbtype) {
    return ContactField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  ContactField? _id;
  ContactField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  ContactField? _telegramId;
  ContactField get telegramId {
    return _telegramId = _setField(_telegramId, 'telegramId', DbType.text);
  }

  ContactField? _name;
  ContactField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  ContactField? _phone;
  ContactField get phone {
    return _phone = _setField(_phone, 'phone', DbType.text);
  }

  ContactField? _chatId;
  ContactField get chatId {
    return _chatId = _setField(_chatId, 'chatId', DbType.text);
  }

  ContactField? _autoParse;
  ContactField get autoParse {
    return _autoParse = _setField(_autoParse, 'autoParse', DbType.bool);
  }

  ContactField? _accountAlias;
  ContactField get accountAlias {
    return _accountAlias =
        _setField(_accountAlias, 'accountAlias', DbType.text);
  }

  ContactField? _contactAlias;
  ContactField get contactAlias {
    return _contactAlias =
        _setField(_contactAlias, 'contactAlias', DbType.text);
  }

  ContactField? _replyMode;
  ContactField get replyMode {
    return _replyMode = _setField(_replyMode, 'replyMode', DbType.integer);
  }

  ContactField? _debtReminderMode;
  ContactField get debtReminderMode {
    return _debtReminderMode =
        _setField(_debtReminderMode, 'debtReminderMode', DbType.integer);
  }

  ContactField? _accountId;
  ContactField get accountId {
    return _accountId = _setField(_accountId, 'accountId', DbType.text);
  }

  ContactField? _dateCreated;
  ContactField get dateCreated {
    return _dateCreated =
        _setField(_dateCreated, 'dateCreated', DbType.datetime);
  }

  /// Deletes List<Contact> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnContact!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnContact!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from contact ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnContact!.updateBatch(qparams, values);
  }

  /// This method always returns [Contact] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Contact?
  @override
  Future<Contact?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnContact!.toList(qparams);
    final data = await objFuture;
    Contact? obj;
    if (data.isNotEmpty) {
      obj = Contact.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plAccount'))) {
          obj.plAccount =
              obj.plAccount ?? await obj.getAccount(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Contact]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Contact?
  @override
  Future<Contact> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Contact();
  }

  /// This method returns int. [Contact]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? contactCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final contactsFuture = await _mnContact!.toList(qparams);
    final int count = contactsFuture[0]['CNT'] as int;
    if (contactCount != null) {
      contactCount(count);
    }
    return count;
  }

  /// This method returns List<Contact> [Contact]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Contact>
  @override
  Future<List<Contact>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Contact> contactsData = await Contact.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return contactsData;
  }

  /// This method returns Json String [Contact]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Contact]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Contact]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnContact!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Contact]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM contact WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<String>.
  /// <returns>List<String>
  @override
  Future<List<String>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<String> idData = <String>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnContact!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as String);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Contact]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnContact!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Contact.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnContact!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ContactFilterBuilder

// region ContactFields
class ContactFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fTelegramId;
  static TableField get telegramId {
    return _fTelegramId = _fTelegramId ??
        SqlSyntax.setField(_fTelegramId, 'telegramId', DbType.text);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fPhone;
  static TableField get phone {
    return _fPhone =
        _fPhone ?? SqlSyntax.setField(_fPhone, 'phone', DbType.text);
  }

  static TableField? _fChatId;
  static TableField get chatId {
    return _fChatId =
        _fChatId ?? SqlSyntax.setField(_fChatId, 'chatId', DbType.text);
  }

  static TableField? _fAutoParse;
  static TableField get autoParse {
    return _fAutoParse = _fAutoParse ??
        SqlSyntax.setField(_fAutoParse, 'autoParse', DbType.bool);
  }

  static TableField? _fAccountAlias;
  static TableField get accountAlias {
    return _fAccountAlias = _fAccountAlias ??
        SqlSyntax.setField(_fAccountAlias, 'accountAlias', DbType.text);
  }

  static TableField? _fContactAlias;
  static TableField get contactAlias {
    return _fContactAlias = _fContactAlias ??
        SqlSyntax.setField(_fContactAlias, 'contactAlias', DbType.text);
  }

  static TableField? _fReplyMode;
  static TableField get replyMode {
    return _fReplyMode = _fReplyMode ??
        SqlSyntax.setField(_fReplyMode, 'replyMode', DbType.integer);
  }

  static TableField? _fDebtReminderMode;
  static TableField get debtReminderMode {
    return _fDebtReminderMode = _fDebtReminderMode ??
        SqlSyntax.setField(
            _fDebtReminderMode, 'debtReminderMode', DbType.integer);
  }

  static TableField? _fAccountId;
  static TableField get accountId {
    return _fAccountId = _fAccountId ??
        SqlSyntax.setField(_fAccountId, 'accountId', DbType.text);
  }

  static TableField? _fDateCreated;
  static TableField get dateCreated {
    return _fDateCreated = _fDateCreated ??
        SqlSyntax.setField(_fDateCreated, 'dateCreated', DbType.datetime);
  }
}
// endregion ContactFields

//region ContactManager
class ContactManager extends SqfEntityProvider {
  ContactManager()
      : super(LDModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'contact';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion ContactManager
// region Account
class Account extends TableBase {
  Account(
      {this.id, this.telegramId, this.deviceId, this.phone, this.dateCreated}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Account.withFields(
      this.id, this.telegramId, this.deviceId, this.phone, this.dateCreated) {
    _setDefaultValues();
  }
  Account.withId(
      this.id, this.telegramId, this.deviceId, this.phone, this.dateCreated) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Account.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = o['id'].toString();
    if (o['telegramId'] != null) {
      telegramId = o['telegramId'].toString();
    }
    if (o['deviceId'] != null) {
      deviceId = o['deviceId'].toString();
    }
    if (o['phone'] != null) {
      phone = o['phone'].toString();
    }
    if (o['dateCreated'] != null) {
      dateCreated = int.tryParse(o['dateCreated'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateCreated'].toString())!)
          : DateTime.tryParse(o['dateCreated'].toString());
    }

    isSaved = true;
  }
  // FIELDS (Account)
  String? id;
  String? telegramId;
  String? deviceId;
  String? phone;
  DateTime? dateCreated;
  bool? isSaved;
  // end FIELDS (Account)

// COLLECTIONS & VIRTUALS (Account)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plContacts', 'plField2'..]) or so on..
  List<Contact>? plContacts;

  /// get Contact(s) filtered by id=accountId
  ContactFilterBuilder? getContacts(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Contact()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .accountId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Account)

  static const bool _softDeleteActivated = false;
  AccountManager? __mnAccount;

  AccountManager get _mnAccount {
    return __mnAccount = __mnAccount ?? AccountManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (telegramId != null || !forView) {
      map['telegramId'] = telegramId;
    }
    if (deviceId != null || !forView) {
      map['deviceId'] = deviceId;
    }
    if (phone != null || !forView) {
      map['phone'] = phone;
    }
    if (dateCreated != null) {
      map['dateCreated'] = forJson
          ? dateCreated!.toString()
          : forQuery
              ? dateCreated!.millisecondsSinceEpoch
              : dateCreated;
    } else if (dateCreated != null || !forView) {
      map['dateCreated'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (telegramId != null || !forView) {
      map['telegramId'] = telegramId;
    }
    if (deviceId != null || !forView) {
      map['deviceId'] = deviceId;
    }
    if (phone != null || !forView) {
      map['phone'] = phone;
    }
    if (dateCreated != null) {
      map['dateCreated'] = forJson
          ? dateCreated!.toString()
          : forQuery
              ? dateCreated!.millisecondsSinceEpoch
              : dateCreated;
    } else if (dateCreated != null || !forView) {
      map['dateCreated'] = null;
    }

// COLLECTIONS (Account)
    if (!forQuery) {
      map['Contacts'] = await getContacts()!.toMapList();
    }
// END COLLECTIONS (Account)

    return map;
  }

  /// This method returns Json String [Account]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Account]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      id,
      telegramId,
      deviceId,
      phone,
      dateCreated != null ? dateCreated!.millisecondsSinceEpoch : null
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      telegramId,
      deviceId,
      phone,
      dateCreated != null ? dateCreated!.millisecondsSinceEpoch : null
    ];
  }

  static Future<List<Account>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Account.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Account>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Account>[];
    try {
      objList = list
          .map((account) => Account.fromMap(account as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Account.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Account>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Account> objList = <Account>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Account.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('account.plContacts') && */ (preloadFields ==
                null ||
            preloadFields.contains('plContacts'))) {
          /*_loadedfields!.add('account.plContacts'); */ obj.plContacts =
              obj.plContacts ??
                  await obj.getContacts()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Account by ID if exist, otherwise returns null
  /// Primary Keys: String? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Account] if exist, otherwise returns null
  Future<Account?> getById(String? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Account? obj;
    final data = await _mnAccount.getById([id]);
    if (data.length != 0) {
      obj = Account.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('account.plContacts') && */ (preloadFields ==
                null ||
            preloadFields.contains('plContacts'))) {
          /*_loadedfields!.add('account.plContacts'); */ obj.plContacts =
              obj.plContacts ??
                  await obj.getContacts()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Account) object. If the Primary Key (id) field is null, returns Error.
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  /// Call the saveAs() method if you do not want to save it when there is another row with the same id
  /// <returns>Returns BoolResult
  @override
  Future<BoolResult> save({bool ignoreBatch = true}) async {
    final result = BoolResult(success: false);
    try {
      await _mnAccount.rawInsert(
          'INSERT ${isSaved! ? 'OR REPLACE' : ''} INTO account (id, telegramId, deviceId, phone, dateCreated)  VALUES (?,?,?,?,?)',
          toArgsWithIds(),
          ignoreBatch);
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

    saveResult = result;
    return result;
  }

  /// saveAll method saves the sent List<Account> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Account> accounts,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await LDModel().batchStart();
    for (final obj in accounts) {
      await obj.save();
    }
    if (!isStartedBatch) {
      result = await LDModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns 1
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnAccount.rawInsert(
          'INSERT OR REPLACE INTO account (id, telegramId, deviceId, phone, dateCreated)  VALUES (?,?,?,?,?)',
          [
            id,
            telegramId,
            deviceId,
            phone,
            dateCreated != null ? dateCreated!.millisecondsSinceEpoch : null
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Account id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Account id=$id did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Account Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Deletes Account

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Account invoked (id=$id)');
    if (await Contact().select().accountId.equals(id).and.toCount() > 0) {
      return BoolResult(
          success: false,
          errorMessage:
              'SQFENTITY ERROR: The DELETE statement conflicted with the REFERENCE RELATIONSHIP (Contact.accountId)');
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnAccount
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnAccount.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Account] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  AccountFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return AccountFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  AccountFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return AccountFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
    dateCreated = dateCreated ?? DateTime.now();
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion account

// region AccountField
class AccountField extends FilterBase {
  AccountField(AccountFilterBuilder accountFB) : super(accountFB);

  @override
  AccountFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as AccountFilterBuilder;
  }

  @override
  AccountFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as AccountFilterBuilder;
  }

  @override
  AccountFilterBuilder isNull() {
    return super.isNull() as AccountFilterBuilder;
  }

  @override
  AccountFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as AccountFilterBuilder;
  }

  @override
  AccountFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as AccountFilterBuilder;
  }

  @override
  AccountFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as AccountFilterBuilder;
  }

  @override
  AccountFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as AccountFilterBuilder;
  }

  @override
  AccountFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as AccountFilterBuilder;
  }

  @override
  AccountFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as AccountFilterBuilder;
  }

  @override
  AccountFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as AccountFilterBuilder;
  }

  @override
  AccountFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as AccountFilterBuilder;
  }

  @override
  AccountFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as AccountFilterBuilder;
  }

  @override
  AccountField get not {
    return super.not as AccountField;
  }
}
// endregion AccountField

// region AccountFilterBuilder
class AccountFilterBuilder extends ConjunctionBase {
  AccountFilterBuilder(Account obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnAccount = obj._mnAccount;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  AccountManager? _mnAccount;

  /// put the sql keyword 'AND'
  @override
  AccountFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  AccountFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  AccountFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  AccountFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  AccountFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  AccountFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  AccountFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  AccountFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  AccountFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  AccountFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  AccountFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  AccountField _setField(AccountField? field, String colName, DbType dbtype) {
    return AccountField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  AccountField? _id;
  AccountField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  AccountField? _telegramId;
  AccountField get telegramId {
    return _telegramId = _setField(_telegramId, 'telegramId', DbType.text);
  }

  AccountField? _deviceId;
  AccountField get deviceId {
    return _deviceId = _setField(_deviceId, 'deviceId', DbType.text);
  }

  AccountField? _phone;
  AccountField get phone {
    return _phone = _setField(_phone, 'phone', DbType.text);
  }

  AccountField? _dateCreated;
  AccountField get dateCreated {
    return _dateCreated =
        _setField(_dateCreated, 'dateCreated', DbType.datetime);
  }

  /// Deletes List<Account> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Check sub records where in (Contact) according to DeleteRule.NO_ACTION

    final idListContactBYaccountId = toListPrimaryKeySQL(false);
    final resContactBYaccountId = await Contact()
        .select()
        .where('accountId IN (${idListContactBYaccountId['sql']})',
            parameterValue: idListContactBYaccountId['args'])
        .toCount();
    if (resContactBYaccountId > 0) {
      return BoolResult(
          success: false,
          errorMessage:
              'SQFENTITY ERROR: The DELETE statement conflicted with the REFERENCE RELATIONSHIP (Contact.accountId)');
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnAccount!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnAccount!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from account ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnAccount!.updateBatch(qparams, values);
  }

  /// This method always returns [Account] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Account?
  @override
  Future<Account?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnAccount!.toList(qparams);
    final data = await objFuture;
    Account? obj;
    if (data.isNotEmpty) {
      obj = Account.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('account.plContacts') && */ (preloadFields ==
                null ||
            preloadFields.contains('plContacts'))) {
          /*_loadedfields!.add('account.plContacts'); */ obj.plContacts =
              obj.plContacts ??
                  await obj.getContacts()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Account]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Account?
  @override
  Future<Account> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Account();
  }

  /// This method returns int. [Account]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? accountCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final accountsFuture = await _mnAccount!.toList(qparams);
    final int count = accountsFuture[0]['CNT'] as int;
    if (accountCount != null) {
      accountCount(count);
    }
    return count;
  }

  /// This method returns List<Account> [Account]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Account>
  @override
  Future<List<Account>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Account> accountsData = await Account.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return accountsData;
  }

  /// This method returns Json String [Account]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Account]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Account]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnAccount!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Account]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM account WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<String>.
  /// <returns>List<String>
  @override
  Future<List<String>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<String> idData = <String>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnAccount!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as String);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Account]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnAccount!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Account.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnAccount!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion AccountFilterBuilder

// region AccountFields
class AccountFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fTelegramId;
  static TableField get telegramId {
    return _fTelegramId = _fTelegramId ??
        SqlSyntax.setField(_fTelegramId, 'telegramId', DbType.text);
  }

  static TableField? _fDeviceId;
  static TableField get deviceId {
    return _fDeviceId =
        _fDeviceId ?? SqlSyntax.setField(_fDeviceId, 'deviceId', DbType.text);
  }

  static TableField? _fPhone;
  static TableField get phone {
    return _fPhone =
        _fPhone ?? SqlSyntax.setField(_fPhone, 'phone', DbType.text);
  }

  static TableField? _fDateCreated;
  static TableField get dateCreated {
    return _fDateCreated = _fDateCreated ??
        SqlSyntax.setField(_fDateCreated, 'dateCreated', DbType.datetime);
  }
}
// endregion AccountFields

//region AccountManager
class AccountManager extends SqfEntityProvider {
  AccountManager()
      : super(LDModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'account';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion AccountManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o)? nextval]) async {
    final val = await LDModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o)? currentval]) async {
    final val = await LDModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o)? currentval]) async {
    final val = await LDModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class LDModelSequenceManager extends SqfEntityProvider {
  LDModelSequenceManager() : super(LDModel());
}
// END OF ENTITIES
